# vim:ft=sh
# Path to your oh-my-zsh configuration.
ZSH=$HOME/.oh-my-zsh

# Set name of the theme to load.
# Look in ~/.oh-my-zsh/themes/
# Optionally, if you set this to "random", it'll load a random theme each
# time that oh-my-zsh is loaded.

# Set to this to use case-sensitive completion
# CASE_SENSITIVE="true"

# Comment this out to disable bi-weekly auto-update checks
# DISABLE_AUTO_UPDATE="true"

# Uncomment to change how many often would you like to wait before auto-updates occur? (in days)
# export UPDATE_ZSH_DAYS=13

# Uncomment following line if you want red dots to be displayed while waiting for completion
# COMPLETION_WAITING_DOTS="true"

# Which plugins would you like to load? (plugins can be found in ~/.oh-my-zsh/plugins/*)
# Custom plugins may be added to ~/.oh-my-zsh/custom/plugins/
# Example format: plugins=(rails git textmate ruby lighthouse)
plugins=(git git-extras brew macos pip debian command-not-found rust docker docker-compose aws)

if [ -d /usr/local/share/zsh-completions ]; then
  fpath=(/usr/local/share/zsh-completions $fpath)
fi

source $ZSH/oh-my-zsh.sh

if [[ -s '/etc/zsh_command_not_found' ]]; then
	source '/etc/zsh_command_not_found'
fi

# Customize to your needs...
export EDITOR=nvim

export PATH=/opt/homebrew/bin:$PATH:/snap/bin:~/.cargo/bin:~/bin:~/.local/bin

alias vim=nvim
alias vi=nvim

export FZF_DEFAULT_COMMAND='fd --type f -E .git -E vender -E venv -E node_modules -E build -E target -E spark-warehouse -E .benchmarks -E *.lance'
[ -f ~/.fzf.zsh ] && source ~/.fzf.zsh

OS=`uname`
if [ $OS = 'Darwin' ]; then
  complete -C '/opt/homebrew/bin/aws_completer' aws
fi

[ -f ~/.zshrc.local ] && source ~/.zshrc.local

eval "$(starship init zsh)"
export PATH="${HOME}/.modular/pkg/packages.modular.com_mojo/bin:$PATH"
export BAT_THEME='Visual Studio Dark+'

export RUSTCFLAGS="-C target-cpu=native"

export NVM_DIR="$HOME/.nvm"
[ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"  # This loads nvm
[ -s "$NVM_DIR/bash_completion" ] && \. "$NVM_DIR/bash_completion"  # This loads nvm bash_completion
