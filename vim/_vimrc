set nocompatible

filetype off
set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()

" let Vundle manage Vundle
" required!
Plugin 'gmarik/Vundle.vim'

Plugin 'fatih/vim-go'
Plugin 'AndrewRadev/splitjoin.vim'


" C++ plugins
Plugin 'rhysd/vim-clang-format'
Plugin 'vim-scripts/Cpp11-Syntax-Support.git'
"Plugin 'Valloric/YouCompleteMe'

"Plugin 'scrooloose/syntastic'  # replace with 'w0rp/ale' in vim 8
Plugin 'w0rp/ale'
Plugin 'Chiel92/vim-autoformat'

Plugin 'a.vim'
Plugin 'altercation/vim-colors-solarized.git'
Plugin 'vim-airline/vim-airline'
Plugin 'vim-airline/vim-airline-themes'
"Plugin 'funorpain/vim-cpplint.git'
"Plugin 'hynek/vim-python-pep8-indent.git'
Plugin 'klen/python-mode'
Plugin 'kien/ctrlp.vim.git'
"Plugin 'lambdalisue/nose.vim.git'
Plugin 'majutsushi/tagbar.git'
"'Plugin 'mitechie/pyflakes-pathogen.git'
Plugin 'reinh/vim-makegreen.git'

" Python
"Plugin 'tpope/vim-fugitive'
"Plugin 'nvie/vim-flake8'
"Plugin 'vim-scripts/pep8.git'
Plugin 'jmcantrell/vim-virtualenv'

Plugin 'scrooloose/nerdtree'
Plugin 'lifepillar/pgsql.vim.git'
Plugin 'hashivim/vim-hashicorp-tools'
Plugin 'fatih/vim-nginx'

" JS
Plugin 'pangloss/vim-javascript'
Plugin 'mxw/vim-jsx'
Plugin 'flowtype/vim-flow'

" Docker
Plugin 'ekalinin/Dockerfile.vim'

" Rust
Plugin 'rust-lang/rust.vim'
Plugin 'racer-rust/vim-racer'

call vundle#end()
filetype plugin indent on

set nobackup
set autowrite
set clipboard=unnamed
syntax on
set background=dark
let g:solarized_termtrans=1
colorscheme solarized
set laststatus=2
set visualbell
set nohlsearch
set incsearch
set wildmenu
set wildmode=longest:full
set mouse=a
set lazyredraw
set number
set foldenable
set foldmethod=indent
set foldlevel=100
set foldopen-=search
set foldopen-=undo
set formatoptions=ro
set guioptions-=T " remove toolbar
set cindent
set autoindent
set smartindent
set tabstop=4
set softtabstop=4
set shiftwidth=4
set noexpandtab
set smarttab
set secure
set encoding=utf-8
set term=xterm-256color

" general settings
function RemoveTrailingWhitespace()
	if &ft != "diff"
		let b:curcol = col(".")
		let b:curline = line(".")
		silent! %s/\s\+$//
		silent! %s/\(\s*\n\)\+\%$//
		call cursor(b:curline, b:curcol)
	endif
endfunction
au BufWritePre * call RemoveTrailingWhitespace()


" Taglist
let Tlist_Sort_Type = "name" " order by
let Tlist_Use_Right_Window = 1 " split to the right side of the screen
let Tlist_Show_Menu = 1
let Tlist_Display_Prototype = 0
let Tlist_Exit_OnlyWindow = 1
let Tlist_File_Fold_Auto_Close = 1
let Tlist_Enable_Fold_Column = 0
"map <C-C> <ESC>:Tlist<RETURN>
set tags=~/.vim/tags,~/tags,./tags,../tags,../../tags
map <C-F12> :!ctags -R --c++-kinds=+p --fields=+iaS --extra=+q .<CR>

map <C-C> <ESC>:TagbarToggle<CR>

" for c/h switch
let g:alternateExtensions_h = "c,cpp,cc,m,inl"
let g:alternateExtensions_cpp = "h"
let g:alternateExtensions_c = "h"
let g:alternateExtensions_m = "h"
let g:alternateSearchPath = 'sfr:../source,sfr:../src,sfr:../include,sfr:../inc,reg:/include/src/g,reg:/src/include/g'
map <F3> <ESC>:A<CR>

" Supertab
let g:SuperTabDefaultCompletionType = "context"
set completeopt=menuone,longest,preview

" Powerline
set rtp+=~/.vim/bundle/powerline/powerline/bindings/vim
let g:Powerline_symbols = 'fancy'

" for NERDTree
map <C-X><C-C> <ESC>:NERDTree<RETURN>
let NERDTreeIgnore=['.*\.o$', 'Makefile\.in$', '.*\.a$', '.*\.lo$', '.*\.la$']

" autocomplet parenthess
:inoremap ( ()<ESC>i
:inoremap ) <c-r>=ClosePair(')')<CR>
:inoremap { {}<ESC>i
:inoremap } <c-r>=ClosePair('}')<CR>
:inoremap [ []<ESC>i
:inoremap ] <c-r>=ClosePair(']')<CR>
":inoremap < <><ESC>i
":inoremap > <c-r>=ClosePair('>')<CR>

function ClosePair(char)
	if getline('.')[col('.') - 1] == a:char
		return "\<Right>"
	else
		return a:char
	endif
endfunction

autocmd BufEnter * :syntax sync fromstart

"map <C-B> <ESC>:e %:p:h<RETURN>
map <C-F4> <ESC>:bd<RETURN>
map <C-Left> <ESC>:bp!<RETURN>
map <C-Right> <ESC>:bn!<RETURN>

au BufWrite *.sh :Autoformat

" Python settings
au FileType python set et tw=79 ts=4 sts=4 sw=4 autoindent sta
au FileType python set smartindent cinwords=if,elif,else,for,while,try,except,finally,def,class
let g:ropevim_vim_completion=0
let g:ropevim_extended_complete=0
let g:formatter_yapf_style = 'pep8'

" C/C++ settings
au BufNewFile *.cpp,*.h,*.cc 0r ~/.vim/skeleton/cpp.cpp
autocmd FileType c,cpp nnoremap <buffer><Leader>cf :<C-u>ClangFormat<CR>
autocmd FileType c,cpp vnoremap <buffer><Leader>cf :ClangFormat<CR>
autocmd BufNewFile,BufRead *.h,*.cpp,*.cc set syntax=cpp11
let g:clang_format#code_style="Google"
let g:clang_format#auto_format=1

" Protobuf syntax
augroup filetype
	au! BufRead,BufNewFile *.proto setfiletype proto
augroup end

" Bash
au FileType sh set sw=2 ts=2 softtabstop=2 expandtab
au bufnewfile *.sh 0r ~/.vim/skeleton/bash.sh

" Use tabs in makefiles
au FileType make,automake set noexpandtab ts=8 st=8 sw=8

" json
auto FileType json set conceallevel=0

" set for make
au BufEnter *_test.cpp set makeprg=make\ check\ %:r

" Support for [:VIM_EVAL:]foo[:END_EVAL:]
autocmd BufNewFile * %substitute#\[:VIM_EVAL:\]\(.\{-\}\)\[:END_EVAL:\]#\=eval(submatch(1))#ge

" Airline use Powerline's fonts
let g:airline_powerline_fonts=1

" Highlight a line if it exceeds 80 chars
"
set colorcolumn=80

if filereadable(glob("~/.vimrc.local"))
	source ~/.vimrc.local
endif

let g:ycm_confirm_extra_conf = 0

" javascript
let g:javascript_plugin_flow = 1
let g:javascript_plugin_jsdoc = 1
au FileType javascript,javascript.jsx set tabstop=2 shiftwidth=2 expandtab nocindent
let g:syntastic_javascript_checkers = ['eslint', 'flow']

"rust
let g:rustfmt_autosave = 1
au FileType rust nmap gd <Plug>(rust-def)
au FileType rust nmap gs <Plug>(rust-def-split)
au FileType rust nmap gx <Plug>(rust-def-vertical)
au FileType rust nmap <leader>gd <Plug>(rust-doc)
