set nocompatible

if has('nvim')
	call plug#begin('~/.local/share/nvim/plugged')
else
	call plug#begin('~/.vim/plugged')
endif

" Color and appearances 
Plug 'altercation/vim-colors-solarized', { 'set': 'all' }
Plug 'joshdick/onedark.vim'
Plug 'vim-airline/vim-airline'
Plug 'vim-airline/vim-airline-themes'

" General settings
Plug 'junegunn/fzf', { 'dir': '~/.fzf', 'do': './install --all' }
Plug 'junegunn/fzf.vim'
Plug 'scrooloose/nerdtree'

" General programming settings, usable for all languages.
"Plug 'ludovicchabant/vim-gutentags'
Plug 'majutsushi/tagbar'
Plug 'AndrewRadev/splitjoin.vim'
Plug 'Chiel92/vim-autoformat'
Plug 'w0rp/ale'

Plug 'autozimu/LanguageClient-neovim', {
    \ 'branch': 'next',
    \ 'do': 'bash install.sh',
    \ }

if has('nvim')
  Plug 'Shougo/deoplete.nvim', { 'do': ':UpdateRemotePlugins' }
else
  Plug 'Shougo/deoplete.nvim'
  Plug 'roxma/nvim-yarp'
  Plug 'roxma/vim-hug-neovim-rpc'
endif

" Go
Plug 'fatih/vim-go', { 'do': ':GoUpdateBinaries' }


" Python
"Plug 'zchee/deoplete-jedi'
"Plug 'tpope/vim-fugitive'
"Plug 'nvie/vim-flake8'
"Plug 'vim-scripts/pep8.git'
"Plug 'jmcantrell/vim-virtualenv'


" JS
"Plug 'mhartington/nvim-typescript'
"Plug 'HerringtonDarkholme/yats.vim'

" Docker
Plug 'ekalinin/Dockerfile.vim'

" Rust
Plug 'rust-lang/rust.vim'
Plug 'prabirshrestha/async.vim'

call plug#end()

filetype plugin indent on

set nobackup
set autowrite
set clipboard=unnamed
syntax on
set background=dark
let g:solarized_termtrans=1
colorscheme solarized
set laststatus=2
set visualbell
set nohlsearch
set incsearch
set wildmenu
set wildmode=longest:full
set mouse=a
set lazyredraw
set number
set foldenable
set foldmethod=indent
set foldlevel=100
set foldopen-=search
set foldopen-=undo
set formatoptions=ro
set guioptions-=T " remove toolbar
set cindent
set autoindent
set smartindent
set tabstop=4
set softtabstop=4
set shiftwidth=4
set noexpandtab
set smarttab
set secure
set encoding=utf-8

let g:deoplete#enable_at_startup = 1
" Taglist
let Tlist_Sort_Type = "name" " order by
let Tlist_Use_Right_Window = 1 " split to the right side of the screen
let Tlist_Show_Menu = 1
let Tlist_Display_Prototype = 0
let Tlist_Exit_OnlyWindow = 1
let Tlist_File_Fold_Auto_Close = 1
let Tlist_Enable_Fold_Column = 0
"map <C-C> <ESC>:Tlist<RETURN>
set tags=~/.vim/tags,~/tags,./tags,../tags,../../tags
map <C-F12> :!ctags -R --c++-kinds=+p --fields=+iaS --extra=+q .<CR>

map <C-C> <ESC>:TagbarToggle<CR>

let g:LanguageClient_serverCommands = {
	\ 'rust': ['rustup', 'run', 'stable', 'rls'],
	\ 'python' : ['pyls'],
	\ 'javascript': ['javascript-typescript-stdio'],
	\ }

nnoremap <silent> K :call LanguageClient_textDocument_hover()<CR>
nnoremap <silent> gd :call LanguageClient_textDocument_definition()<CR>
nnoremap <silent> <F2> :call LanguageClient_textDocument_rename()<CR>

" for NERDTree
map <C-X><C-C> <ESC>:NERDTree<RETURN>
let NERDTreeIgnore=['.*\.o$', 'Makefile\.in$', '.*\.a$', '.*\.lo$', '.*\.la$']

" for fzf
map <C-P> <ESC>:Files<RETURN>

" autocomplet parenthess
:inoremap ( ()<ESC>i
:inoremap ) <c-r>=ClosePair(')')<CR>
:inoremap { {}<ESC>i
:inoremap } <c-r>=ClosePair('}')<CR>
:inoremap [ []<ESC>i
:inoremap ] <c-r>=ClosePair(']')<CR>
":inoremap < <><ESC>i
":inoremap > <c-r>=ClosePair('>')<CR>

function ClosePair(char)
	if getline('.')[col('.') - 1] == a:char
		return "\<Right>"
	else
		return a:char
	endif
endfunction

autocmd BufEnter * :syntax sync fromstart

"map <C-B> <ESC>:e %:p:h<RETURN>
map <C-F4> <ESC>:bd<RETURN>
map <C-Left> <ESC>:bp!<RETURN>
map <C-Right> <ESC>:bn!<RETURN>

au BufWrite *.sh :Autoformat

" Python settings
au FileType python set et tw=79 ts=4 sts=4 sw=4 autoindent sta
au FileType python set smartindent cinwords=if,elif,else,for,while,try,except,finally,def,class

" Protobuf syntax
augroup filetype
  au! BufRead,BufNewFile *.proto setfiletype proto
augroup end

" Go settings
autocmd BufNewFile,BufRead *.go setlocal noexpandtab tabstop=4 shiftwidth=4
let g:go_highlight_build_constraints = 1
let g:go_highlight_extra_types = 1
let g:go_highlight_fields = 1
let g:go_highlight_functions = 1
let g:go_highlight_methods = 1
let g:go_highlight_operators = 1
let g:go_highlight_structs = 1
let g:go_highlight_types = 1
let g:go_fmt_command = "goimports"

" Bash
au FileType sh set sw=2 ts=2 softtabstop=2 expandtab
au bufnewfile *.sh 0r ~/.vim/skeleton/bash.sh

" Use tabs in makefiles
au FileType make,automake set noexpandtab ts=8 st=8 sw=8

" json
auto FileType json set conceallevel=0

" Support for [:VIM_EVAL:]foo[:END_EVAL:]
autocmd BufNewFile * %substitute#\[:VIM_EVAL:\]\(.\{-\}\)\[:END_EVAL:\]#\=eval(submatch(1))#ge

" Airline use Powerline's fonts
let g:airline_powerline_fonts=1
let g:airline#extensions#ale#enabled = 1

" Highlight a line if it exceeds 80 chars
"
set colorcolumn=80

if filereadable(glob("~/.vimrc.local"))
	source ~/.vimrc.local
endif

"rust
let g:rustfmt_autosave = 1
let g:autofmt_autosave = 1
autocmd BufReadPost *.rs setlocal filetype=rust
let g:LanguageClient_autoStart = 1

