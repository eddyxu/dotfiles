set nocompatible

filetype off
set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()

" let Vundle manage Vundle
" required!
Plugin 'gmarik/Vundle.vim'

"Plugin 'Lokaltog/powerline.git'
Plugin 'Blackrush/vim-gocode.git'
"Plugin 'Rip-Rip/clang_complete.git'
Plugin 'rhysd/vim-clang-format'
Plugin 'Valloric/YouCompleteMe'
Plugin 'a.vim'
Plugin 'altercation/vim-colors-solarized.git'
Plugin 'bling/vim-airline'
Plugin 'funorpain/vim-cpplint.git'
Plugin 'hynek/vim-python-pep8-indent.git'
Plugin 'jnwhiteh/vim-golang.git'
Plugin 'fatih/vim-go'
Plugin 'kien/ctrlp.vim.git'
Plugin 'lambdalisue/nose.vim.git'
Plugin 'majutsushi/tagbar.git'
Plugin 'mitechie/pyflakes-pathogen.git'
Plugin 'reinh/vim-makegreen.git'
Plugin 'tpope/vim-fugitive'
Plugin 'nvie/vim-flake8'
Plugin 'vim-scripts/Cpp11-Syntax-Support.git'
Plugin 'vim-scripts/The-NERD-tree.git'
Plugin 'vim-scripts/pep8.git'
call vundle#end()
filetype plugin indent on

set nobackup
set autowrite
set clipboard=unnamed
syntax on
set background=dark
let g:solarized_termtrans=1
colorscheme solarized
set statusline=%F%m%r%h%w\ [FORMAT=%{&ff},\ %{&fenc}]\ [TYPE=%Y]\ [ASCII=\%03.3b]\ [HEX=\%02.2B]\ [POS=%04l,%04v][%p%%]\ [LEN=%L]
set laststatus=2
set visualbell
set nohlsearch
set incsearch
set wildmenu
set wildmode=longest:full
set mouse=a
set lazyredraw
set number
set foldenable
set foldmethod=indent
set foldlevel=100
set foldopen-=search
set foldopen-=undo
set formatoptions=ro
set guioptions-=T " remove toolbar
set cindent
set autoindent
set smartindent
set tabstop=4
set softtabstop=4
set shiftwidth=4
set noexpandtab
set smarttab
set secure
set encoding=utf-8
set term=xterm-256color

" general settings
function RemoveTrailingWhitespace()
  if &ft != "diff"
    let b:curcol = col(".")
	let b:curline = line(".")
	silent! %s/\s\+$//
	silent! %s/\(\s*\n\)\+\%$//
    call cursor(b:curline, b:curcol)
  endif
endfunction
au BufWritePre * call RemoveTrailingWhitespace()


" Taglist
let Tlist_Sort_Type = "name" " order by
let Tlist_Use_Right_Window = 1 " split to the right side of the screen
let Tlist_Show_Menu = 1
let Tlist_Display_Prototype = 0
let Tlist_Exit_OnlyWindow = 1
let Tlist_File_Fold_Auto_Close = 1
let Tlist_Enable_Fold_Column = 0
"map <C-C> <ESC>:Tlist<RETURN>
set tags=~/.vim/tags,~/tags,./tags,../tags,../../tags
map <C-F12> :!ctags -R --c++-kinds=+p --fields=+iaS --extra=+q .<CR>

map <C-C> <ESC>:TagbarToggle<CR>

" for c/h switch
let g:alternateExtensions_h = "c,cpp,cc,m,inl"
let g:alternateExtensions_cpp = "h"
let g:alternateExtensions_c = "h"
let g:alternateExtensions_m = "h"
let g:alternateSearchPath = 'sfr:../source,sfr:../src,sfr:../include,sfr:../inc,reg:/include/src/g,reg:/src/include/g'
map <F3> <ESC>:A<CR>

" Supertab
let g:SuperTabDefaultCompletionType = "context"
set completeopt=menuone,longest,preview

" Powerline
set rtp+=~/.vim/bundle/powerline/powerline/bindings/vim
let g:Powerline_symbols = 'fancy'

" for NERDTree
map <C-X><C-C> <ESC>:NERDTree<RETURN>
let NERDTreeIgnore=['.*\.o$', 'Makefile\.in$', '.*\.a$', '.*\.lo$', '.*\.la$']

" autocomplet parenthess
:inoremap ( ()<ESC>i
:inoremap ) <c-r>=ClosePair(')')<CR>
:inoremap { {}<ESC>i
:inoremap } <c-r>=ClosePair('}')<CR>
:inoremap [ []<ESC>i
:inoremap ] <c-r>=ClosePair(']')<CR>
":inoremap < <><ESC>i
":inoremap > <c-r>=ClosePair('>')<CR>

function ClosePair(char)
	if getline('.')[col('.') - 1] == a:char
		return "\<Right>"
	else
		return a:char
	endif
endfunction

autocmd BufEnter * :syntax sync fromstart

"map <C-B> <ESC>:e %:p:h<RETURN>
map <C-F4> <ESC>:bd<RETURN>
map <C-Left> <ESC>:bp!<RETURN>
map <C-Right> <ESC>:bn!<RETURN>

" Python settings
au FileType python set et tw=79 ts=2 sts=2 sw=2 autoindent sta
au FileType python set smartindent cinwords=if,elif,else,for,while,try,except,finally,def,class
au FileType python compiler nose
au BufNewFile *.py 0r ~/.vim/skeleton/py.py
au FileType python set omnifunc=pythoncomplete#Complete
let g:ropevim_vim_completion=1
let g:ropevim_extended_complete=1
let g:pydiction_location='~/.vim/ftplugin/complete-dict'
au FileType python set omnifunc=pythoncomplete#Complete
" pep8
let g:pep8_map='<leader>8'

" Set up C++ follow google C++ style
" https://code.google.com/p/chromiumembedded/wiki/VimConfiguration
"
" Configuration for C-like languages.
function! SetupForCLang()
    " Highlight lines longer than 80 characters.
    au BufWinEnter * let w:m2=matchadd('ErrorMsg', '\%>80v.\+', -1)
    " Alternately, uncomment these lines to wrap at 80 characters.
    " setlocal textwidth=80
    " setlocal wrap

    " Use 2 spaces for indentation.
    setlocal shiftwidth=2
    setlocal tabstop=2
    setlocal softtabstop=2
    setlocal expandtab

    " Configure auto-indentation formatting.
    setlocal cindent
    setlocal cinoptions=h1,l1,g1,t0,i4,+4,(0,w1,W4
    setlocal indentexpr=GoogleCppIndent()
    let b:undo_indent = "setl sw< ts< sts< et< tw< wrap< cin< cino< inde<"
endfunction

" From https://github.com/vim-scripts/google.vim/blob/master/indent/google.vim
function! GoogleCppIndent()
    let l:cline_num = line('.')

    let l:orig_indent = cindent(l:cline_num)

    if l:orig_indent == 0 | return 0 | endif

    let l:pline_num = prevnonblank(l:cline_num - 1)
    let l:pline = getline(l:pline_num)
    if l:pline =~# '^\s*template' | return l:pline_indent | endif

    " TODO: I don't know to correct it:
    " namespace test {
    " void
    " ....<-- invalid cindent pos
    "
    " void test() {
    " }
    "
    " void
    " <-- cindent pos
    if l:orig_indent != &shiftwidth | return l:orig_indent | endif

    let l:in_comment = 0
    let l:pline_num = prevnonblank(l:cline_num - 1)
    while l:pline_num > -1
        let l:pline = getline(l:pline_num)
        let l:pline_indent = indent(l:pline_num)

        if l:in_comment == 0 && l:pline =~ '^.\{-}\(/\*.\{-}\)\@<!\*/'
            let l:in_comment = 1
        elseif l:in_comment == 1
            if l:pline =~ '/\*\(.\{-}\*/\)\@!'
                let l:in_comment = 0
            endif
        elseif l:pline_indent == 0
            if l:pline !~# '\(#define\)\|\(^\s*//\)\|\(^\s*{\)'
                if l:pline =~# '^\s*namespace.*'
                    return 0
                else
                    return l:orig_indent
                endif
            elseif l:pline =~# '\\$'
                return l:orig_indent
            endif
        else
            return l:orig_indent
        endif

        let l:pline_num = prevnonblank(l:pline_num - 1)
    endwhile

    return l:orig_indent
endfunction


" C/C++ settings
au FileType cpp call SetupForCLang()
au FileType c set et sw=4 sts=4 cinoptions=l1,g0.5s,h0.5s,i2s,+2s,(0,W2s
au BufNewFile *.cpp,*.h 0r ~/.vim/skeleton/cpp.cpp
let g:clang_format#code_style="Google"
autocmd FileType c,cpp,objc nnoremap <buffer><Leader>cf :<C-u>ClangFormat<CR>
autocmd FileType c,cpp,objc vnoremap <buffer><Leader>cf :ClangFormat<CR>

" Use C++11 syntax
au BufNewFile,BufRead *.cpp set syntax=cpp11

" Protobuf syntax
augroup filetype
	au! BufRead,BufNewFile *.proto setfiletype proto
augroup end

" Coding style for Linux kernel development
if match(expand('%:p'), '^/.*/kernel/.*') == 0
	au FileType c set noet ts=8 sw=8 tw=78 ai si
	au FileType c set backspace=eol,start,indent
	au FileType c syn keyword cType uint ubyte ulong uint64_t uint32_t uint16_t
	au FileType c syn keyword uint8_t boolean_t int64_t int32_t int16_t int8_t
	au FileType c syn keyword u_int64_t u_int32_t u_int16_t u_int8_t
	au FileType c syn keyword cOperator likely unlikely
endif

" Bash
au FileType sh set sw=2 ts=2 softtabstop=2 expandtab
au bufnewfile *.sh 0r ~/.vim/skeleton/bash.sh

au FileType tex,plaintex set nocindent spell

" Use tabs in makefiles
au FileType make,automake set noexpandtab ts=8 st=8 sw=8

" json
auto FileType json set conceallevel=0

" set for make
au BufEnter *_test.cpp set makeprg=make\ check\ %:r

" Support for [:VIM_EVAL:]foo[:END_EVAL:]
autocmd BufNewFile * %substitute#\[:VIM_EVAL:\]\(.\{-\}\)\[:END_EVAL:\]#\=eval(submatch(1))#ge

" Airline use Powerline's fonts
let g:airline_powerline_fonts=1

" Highlight a line if it exceeds 80 chars
"
if exists('+colorcolumn')
	set colorcolumn=81
else
	"" Vim <= 7.3
	au BufWinEnter * let w:m2=matchadd('ErrorMsg', '\%>80v.\+', -1)
endif

if filereadable(glob("~/.vimrc.local"))
    source ~/.vimrc.local
endif

" indent xml file
au FileType xml setlocal equalprg=xmllint\ --format\ --recover\ -\ 2>/dev/null
