set nocompatible

if has('nvim')
	call plug#begin('~/.local/share/nvim/plugged')
else
	call plug#begin('~/.vim/plugged')
endif

" Color and appearances
Plug 'arcticicestudio/nord-vim'
Plug 'vim-airline/vim-airline'
Plug 'vim-airline/vim-airline-themes'

" General settings
Plug 'junegunn/fzf', { 'dir': '~/.fzf', 'do': { -> fzf#install() } }
Plug 'junegunn/fzf.vim'
"Plug 'scrooloose/nerdtree'
Plug 'kyazdani42/nvim-web-devicons' " for file icons
Plug 'kyazdani42/nvim-tree.lua'
Plug 'mileszs/ack.vim'

" General programming settings, usable for all languages.
Plug 'tpope/vim-fugitive'
Plug 'airblade/vim-gitgutter'
Plug 'liuchengxu/vista.vim'
Plug 'AndrewRadev/splitjoin.vim'
Plug 'Chiel92/vim-autoformat'
Plug 'w0rp/ale'
Plug 'neovim/nvim-lspconfig'
Plug 'nvim-treesitter/nvim-treesitter', {'do': ':TSUpdate'}

" Completion
Plug 'hrsh7th/nvim-cmp'
Plug 'hrsh7th/cmp-nvim-lsp'
Plug 'hrsh7th/cmp-path'
Plug 'hrsh7th/cmp-buffer'
Plug 'hrsh7th/cmp-vsnip'
Plug 'hrsh7th/vim-vsnip'

" Go
Plug 'fatih/vim-go', { 'do': ':GoUpdateBinaries' }

" Rust
Plug 'simrat39/rust-tools.nvim'

" Docker
Plug 'ekalinin/Dockerfile.vim'

call plug#end()

filetype plugin indent on

if (has("termguicolors"))
	set termguicolors
endif

set nobackup
set autowrite
set clipboard=unnamed
syntax on
set background=dark
"let g:solarized_termtrans=1
"colorscheme solarized
colorscheme nord
set laststatus=2
set visualbell
set nohlsearch
set incsearch
set wildmenu
set wildmode=longest:full
set mouse=a
set lazyredraw
set number
set foldenable
set foldmethod=indent
set foldlevel=100
set foldopen-=search
set foldopen-=undo
set formatoptions=ro
set guioptions-=T " remove toolbar
set cindent
set autoindent
set smartindent
set tabstop=4
set softtabstop=4
set shiftwidth=4
set noexpandtab
set smarttab
set secure
set encoding=utf-8


" General setup
autocmd BufWritePre * :%s/\s\+$//e

" for NERDTred
" map <C-X><C-C> <ESC>:NERDTree<RETURN>
let NERDTreeIgnore=['.*\.o$', 'Makefile\.in$', '.*\.a$', '.*\.lo$', '.*\.la$']

" for NvimTree
lua require'nvim-tree'.setup {}

map <C-X><C-C> <ESC>:NvimTreeToggle<CR>

" for fzf
map <C-P> <ESC>:Files<RETURN>

" autocomplet parenthess
:inoremap ( ()<ESC>i
:inoremap ) <c-r>=ClosePair(')')<CR>
:inoremap { {}<ESC>i
:inoremap } <c-r>=ClosePair('}')<CR>
:inoremap [ []<ESC>i
:inoremap ] <c-r>=ClosePair(']')<CR>
":inoremap < <><ESC>i
":inoremap > <c-r>=ClosePair('>')<CR>

function ClosePair(char)
	if getline('.')[col('.') - 1] == a:char
		return "\<Right>"
	else
		return a:char
	endif
endfunction

autocmd BufEnter * :syntax sync fromstart

"map <C-B> <ESC>:e %:p:h<RETURN>
map <C-F4> <ESC>:bd<RETURN>
map <C-Left> <ESC>:bp!<RETURN>
map <C-Right> <ESC>:bn!<RETURN>

au BufWrite *.sh :Autoformat

" Protobuf syntax
augroup filetype
	au! BufRead,BufNewFile *.proto setfiletype proto
augroup end

" LSP
nnoremap <silent> <c-]> <cmd>lua vim.lsp.buf.definition()<CR>
nnoremap <silent> K     <cmd>lua vim.lsp.buf.hover()<CR>
nnoremap <silent> gy    <cmd>lua vim.lsp.buf.implementation()<CR>
nnoremap <silent> <c-k> <cmd>lua vim.lsp.buf.signature_help()<CR>
nnoremap <silent> 1gD   <cmd>lua vim.lsp.buf.type_definition()<CR>
nnoremap <silent> gr    <cmd>lua vim.lsp.buf.references()<CR>
nnoremap <silent> g0    <cmd>lua vim.lsp.buf.document_symbol()<CR>
nnoremap <silent> gW    <cmd>lua vim.lsp.buf.workspace_symbol()<CR>
nnoremap <silent> gd    <cmd>lua vim.lsp.buf.definition()<CR>

" Quick-fix
nnoremap <silent> ga <cmd>lua vim.lsp.buf.code_action()<CR>

" Go settings
autocmd BufNewFile,BufRead *.go setlocal noexpandtab tabstop=4 shiftwidth=4
let g:go_highlight_build_constraints = 1
let g:go_highlight_extra_types = 1
let g:go_highlight_fields = 1
let g:go_highlight_functions = 1
let g:go_highlight_methods = 1
let g:go_highlight_operators = 1
let g:go_highlight_structs = 1
let g:go_highlight_types = 1
let g:go_fmt_command = "goimports"

" Rust sttings
let g:rustfmt_autosave = 1
lua <<EOF

local nvim_lsp = require'lspconfig'

local opts = {
	tools = {
		autoSetHints = true,
		runnables = {
			use_telescope = true
			},
		inlay_hints = {
			show_parameter_hints = false,
			parameter_hints_prefix = "",
			other_hints_prefix = "",
			},
		},

	-- all the opts to send to nvim-lspconfig
	-- these override the defaults set by rust-tools.nvim
	-- see https://github.com/neovim/nvim-lspconfig/blob/master/CONFIG.md#rust_analyzer
	server = {
		-- on_attach is a callback called when the language server attachs to the buffer
		-- on_attach = on_attach,
		settings = {
			-- to enable rust-analyzer settings visit:
			-- https://github.com/rust-analyzer/rust-analyzer/blob/master/docs/user/generated_config.adoc
			["rust-analyzer"] = {
				-- enable clippy on save
				checkOnSave = {
					command = "clippy"
					},
				}
			}
		},
	}

require('rust-tools').setup(opts)

require'lspconfig'.bashls.setup{}

require'nvim-treesitter.configs'.setup {
	ensure_installed = {
		"bash",
		"go",
		"python",
		"rust",
		"vim",
		},

	highlight = {
		enable = true,
		-- Setting this to true will run `:h syntax` and tree-sitter at the same time.
		-- Set this to `true` if you depend on 'syntax' being enabled (like for indentation).
		-- Using this option may slow down your editor, and you may see some duplicate highlights.
		-- Instead of true it can also be a list of languages
		additional_vim_regex_highlighting = false,
		},
	}

require'cmp'.setup {
	snippet = {
		-- REQUIRED - you must specify a snippet engine
		expand = function(args)
		vim.fn["vsnip#anonymous"](args.body) -- For `vsnip` users.
		end,
		},
	window = {
		-- completion = cmp.config.window.bordered(),
		-- documentation = cmp.config.window.bordered(),
		},
	sources = {
		{ name = 'nvim_lsp' },
		{ name = 'vsnip' },
		{ name = 'buffer' },
		}
	}

local capabilities = vim.lsp.protocol.make_client_capabilities()
capabilities = require('cmp_nvim_lsp').update_capabilities(capabilities)
EOF

" Bash
au FileType sh set sw=2 ts=2 softtabstop=2 expandtab

" Use tabs in makefiles
au FileType make,automake set noexpandtab ts=8 sw=8

" json
auto FileType json set conceallevel=0

" Ale
set completeopt=menu,menuone,preview,noselect,noinsert
let g:ale_completion_enabled = 1


" Airline use Powerline's fonts
let g:airline_powerline_fonts=1
let g:airline#extensions#ale#enabled = 1

" Highlight a line if it exceeds 100 chars
"
set colorcolumn=100
set updatetime=300
set signcolumn=number

""" Vista

let g:vista_default_executive = 'ctags'
map <C-C> <ESC>:Vista!!<CR>

if filereadable(glob("~/.vimrc.local"))
	source ~/.vimrc.local
endif

