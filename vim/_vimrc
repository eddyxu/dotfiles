set nocompatible

if has('nvim')
	call plug#begin('~/.local/share/nvim/plugged')
else
	call plug#begin('~/.vim/plugged')
endif

" Color and appearances
Plug 'altercation/vim-colors-solarized', { 'set': 'all' }
Plug 'joshdick/onedark.vim'
Plug 'jacoborus/tender.vim'
Plug 'vim-airline/vim-airline'
Plug 'vim-airline/vim-airline-themes'

" General settings
Plug 'junegunn/fzf', { 'dir': '~/.fzf', 'do': { -> fzf#install() } }
Plug 'junegunn/fzf.vim'
Plug 'scrooloose/nerdtree'
Plug 'mileszs/ack.vim'

" General programming settings, usable for all languages.
Plug 'tpope/vim-fugitive'
Plug 'airblade/vim-gitgutter'
Plug 'liuchengxu/vista.vim'
Plug 'AndrewRadev/splitjoin.vim'
Plug 'Chiel92/vim-autoformat'
Plug 'w0rp/ale'
Plug 'neovim/nvim-lspconfig'

" Go
Plug 'fatih/vim-go', { 'do': ':GoUpdateBinaries' }

" Rust
Plug 'rust-lang/rust.vim'
Plug 'simrat39/rust-tools.nvim'


" Docker
Plug 'ekalinin/Dockerfile.vim'

call plug#end()

filetype plugin indent on

if (has("termguicolors"))
 set termguicolors
endif

set nobackup
set autowrite
set clipboard=unnamed
syntax on
set background=dark
"let g:solarized_termtrans=1
"colorscheme solarized
colorscheme tender
set laststatus=2
set visualbell
set nohlsearch
set incsearch
set wildmenu
set wildmode=longest:full
set mouse=a
set lazyredraw
set number
set foldenable
set foldmethod=indent
set foldlevel=100
set foldopen-=search
set foldopen-=undo
set formatoptions=ro
set guioptions-=T " remove toolbar
set cindent
set autoindent
set smartindent
set tabstop=4
set softtabstop=4
set shiftwidth=4
set noexpandtab
set smarttab
set secure
set encoding=utf-8


" General setup
autocmd BufWritePre * :%s/\s\+$//e

" for NERDTree
map <C-X><C-C> <ESC>:NERDTree<RETURN>
let NERDTreeIgnore=['.*\.o$', 'Makefile\.in$', '.*\.a$', '.*\.lo$', '.*\.la$']

" for fzf
map <C-P> <ESC>:Files<RETURN>

" autocomplet parenthess
:inoremap ( ()<ESC>i
:inoremap ) <c-r>=ClosePair(')')<CR>
:inoremap { {}<ESC>i
:inoremap } <c-r>=ClosePair('}')<CR>
:inoremap [ []<ESC>i
:inoremap ] <c-r>=ClosePair(']')<CR>
":inoremap < <><ESC>i
":inoremap > <c-r>=ClosePair('>')<CR>

function ClosePair(char)
	if getline('.')[col('.') - 1] == a:char
		return "\<Right>"
	else
		return a:char
	endif
endfunction

autocmd BufEnter * :syntax sync fromstart

"map <C-B> <ESC>:e %:p:h<RETURN>
map <C-F4> <ESC>:bd<RETURN>
map <C-Left> <ESC>:bp!<RETURN>
map <C-Right> <ESC>:bn!<RETURN>

au BufWrite *.sh :Autoformat

" Protobuf syntax
augroup filetype
  au! BufRead,BufNewFile *.proto setfiletype proto
augroup end

" Go settings
autocmd BufNewFile,BufRead *.go setlocal noexpandtab tabstop=4 shiftwidth=4
let g:go_highlight_build_constraints = 1
let g:go_highlight_extra_types = 1
let g:go_highlight_fields = 1
let g:go_highlight_functions = 1
let g:go_highlight_methods = 1
let g:go_highlight_operators = 1
let g:go_highlight_structs = 1
let g:go_highlight_types = 1
let g:go_fmt_command = "goimports"

" Rust sttings
let g:rustfmt_autosave = 1

" Bash
au FileType sh set sw=2 ts=2 softtabstop=2 expandtab

" Use tabs in makefiles
au FileType make,automake set noexpandtab ts=8 st=8 sw=8

" json
auto FileType json set conceallevel=0

" Ale
let g:ale_linters = {
\  'rust': ['analyzer'],
\}
let g:ale_fixers = { 'rust': ['rustfmt', 'trim_whitespace', 'remove_trailing_lines'] }
set completeopt=menu,menuone,preview,noselect,noinsert
let g:ale_completion_enabled = 1

nmap <silent> gd :ALEGoToDefinition<CR>
nmap <silent> gy :ALEGoToTypeDefinition<CR>

" Airline use Powerline's fonts
let g:airline_powerline_fonts=1
let g:airline#extensions#ale#enabled = 1
let g:airline_theme = 'tender'

" Highlight a line if it exceeds 100 chars
"
set colorcolumn=100

if filereadable(glob("~/.vimrc.local"))
	source ~/.vimrc.local
endif

set updatetime=300

" Always show the signcolumn, otherwise it would shift the text each time
" diagnostics appear/become resolved.
if has("patch-8.1.1564")
  " Recently vim can merge signcolumn and number column into one
  set signcolumn=number
else
  set signcolumn=yes
endif

""" Vista

let g:vista_default_executive = 'ctags'
map <C-C> <ESC>:Vista!!<CR>
